*wiki.txt*    A simple wiki plugin for Vim
*wiki.vim*

Author:  Karl Yngve Lervåg <karl.yngve@gmail.com>
License: MIT license {{{

  Copyright (c) 2020 Karl Yngve Lervåg

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.

}}}

==============================================================================
CONTENTS                                                        *wiki-contents*

  Introduction                                     |wiki-intro|
    Requirements                                   |wiki-intro-requirements|
    Features                                       |wiki-intro-features|
  Configuration                                    |wiki-config|
  Mappings                                         |wiki-mappings|
    Text objects                                   |wiki-mappings-text-obj|
    Journal mappings                               |wiki-mappings-default|
  Commands                                         |wiki-commands|
  Links                                            |wiki-links|
    Link URLs                                      |wiki-links-urls|
    Markdown links                                 |wiki-links-markdown|
    Wiki links                                     |wiki-links-wiki|
    Reference links                                |wiki-links-reference|
  Lists                                            |wiki-lists|
  Completion                                       |wiki-completion|
  Tags                                             |wiki-tags|

==============================================================================
INTRODUCTION                                                       *wiki-intro*

This is a Vim plugin for writing and maintaining a personal wiki. The plugin
was initially based on vimwiki (https://github.com/vimwiki/vimwiki), but it is
written mostly from scratch and is based on a more "do one thing and do it
well" philosophy.

The plugin will activate by default for `.wiki` files, but this may be
customized with |g:wiki_filetypes|. One may also explicitly activate with
|WikiEnable|. The wiki root is automatically detected as long as there is
a top-level `index.wiki` file available. If no such file is found, it sets the
root to the same directory as the current file. In addition, one may specify
a main wiki with the |g:wiki_root| option. This allows convenient mappings and
commands for opening the main wiki from anywhere.

Note: |wiki.vim| is `not` a filetype plugin. It is designed so that it may be used
      along with filetype plugins, e.g. for dedicated Markdown plugins. One
      may also use `wiki-ft.vim` (https://github.com/lervag/wiki-ft.vim) for
      simple syntax highlighting and folding of `.wiki` files, if desired.

------------------------------------------------------------------------------
REQUIREMENTS                                          *wiki-intro-requirements*

This plugin is mainly developed on and for Linux. Some or most of the features
should still work on Windows and OSX, but currently there are no guaranties.

The following is a list of external tools that are used for some of the
features:

  | Program                      | Feature                        |
  | ---------------------------- + ------------------------------ |
  | `date`                         | for journal related stuff      |
  | `xdg-open`                     | for opening `pdf` files on Linux |
  | `pandoc` (https://pandoc.org/) | for |WikiExport|                 |

------------------------------------------------------------------------------
FEATURES                                                  *wiki-intro-features*

- Wiki functionality
  - Global mappings for accessing a specified wiki
  - Local mappings for
    - Navigation (follow links, go back, etc)
    - Renaming pages (will also update links in other pages)
    - Creating a table of contents
    - Toggling links
    - Viewing wiki link graphs
  - Completion of wiki links and link anchors
  - Text objects
    - `iu au` Link url
    - `it at` Link text
- Support for journal entries
  - Navigating the journal back and forth with `<Plug>(wiki-journal-next)`
    and `<Plug>(wiki-journal-prev)`.
  - Support for parsing journal entries in order to make weekly and monthly
    summaries. The parsed result needs manual editing for good results.
- Utility functionality
  - Toggling lists (marking as done/undone or add/remove TODO)
  - Running code snippets (Note: This needs work)
  - |WikiExport| command for exporting to e.g. `pdf` with `pandoc`
  - Text objects
    - `il al` List items
- Third-party support
  - |CtrlP|: |CtrlPWiki| command (https://github.com/ctrlpvim/ctrlp.vim)
  - |fzf|: |WikiFzfPages|, |WikiFzfToc|, and |WikiFzfTags| commands
    (https://github.com/junegunn/fzf.vim)
  - |unite| source (https://github.com/Shougo/unite.vim)
  - |denite| source (https://github.com/Shougo/denite.nvim)

------------------------------------------------------------------------------
USAGE                                                        *wiki-intro-usage*

This outlines the basic steps to get started:

1. Create a wiki directory where the wiki files should be stored, for instance
   `~/documents/wiki`.

2. Add the following to your `vimrc` file: >

   let g:wiki_root = '~/documents/wiki'

3. Now you can open the index file (by default `index.wiki`) with `<leader>ww`
   and start to add your notes as desired.

==============================================================================
CONFIGURATION                                                     *wiki-config*

*g:wiki_root*
  The root path for the main wiki, i.e. the wiki that is opened with the
  `<leader>ww` mapping.

  Default: ''

*g:wiki_filetypes*
  List of filetypes for which |wiki.vim| should be enabled.

  Default: ['wiki']

*g:wiki_link_extension*
  Specify extension that should be applied to wiki links.

  Default: ''

*g:wiki_link_target_map*
  This option may be used to transform text before creating a new link. An
  example: >

    let g:wiki_link_target_map = 'MyFunction'

    function MyFunction(text) abort
      return substitute(tolower(a:text), '\s\+', '-', 'g')
    endfunction
<
  With the above setting, links created with |WikiLinkOpen| or
  |WikiLinkToggle| (or related mappings) will be transformed by `MyFunction`.
  As an example, if one creates a link from the text "Some text", the link
  becomes "[[some-text|Some text]]".

  Default: ''

*g:wiki_link_target_type*
  This option may be used to pick the default style of link that will be used.

  Setting this to `md` will cause Markdown style links to be added by default,
  rather than `wiki` style links. Toggling between link types can still be
  achieved using |WikiLinkToggle|.

  Default: 'wiki'

*g:wiki_journal*
  A dictionary for configuring the journal/diary feature. Available options
  are:

    name~
      Name of journal (used to set journal path).

    frequency~
      One of 'daily', 'weekly', or 'monthly'.

    date_format~
      Dictionary of file name formats for the 'daily', 'weekly', and 'monthly'
      frequencies. The formats may contain the following keys:

        %y  year (two digits)
        %Y  year (four digits)
        %m  month (01..12)
        %d  day of month (01..31)
        %V  ISO week number with Monday as first day of week
        %U  week number with Sunday as first day of week

  Default: >

    let g:wiki_journal = {
        \ 'name': 'journal'
        \ 'frequency': 'daily',
        \ 'date_format': {
        \   'daily' : '%Y-%m-%d',
        \   'weekly' : '%Y_w%V',
        \   'monthly' : '%Y_m%m',
        \ },
        \}

*g:wiki_mappings_use_defaults*
  Whether or not to use default mappings (see |wiki-mappings-default|). If
  this is set to 0, then only custom mappings will be applied. Custom mappings
  may either be specified explicitly or through |g:wiki_mappings_global| and
  |g:wiki_mappings_local|.

  Default: 1

*g:wiki_mappings_global*
*g:wiki_mappings_local*
  These options allow one to customize global and buffer local mappings
  through dictionaries where the keys are the right-hand sides and the values
  are the desired mappings, e.g.: >

    let g:wiki_mappings_global = {
        \ '<plug>(wiki-reload)' : ',wx',
        \}
<
  This example maps `,wx` to |<plug>(wiki-reload)|. The other maps are kept at
  the default (unless |g:wiki_mappings_use_defaults| is set to 0). Some
  mappings are defined in other modes than normal mode. In this case, one can
  use the following syntax: >

    let g:wiki_mappings_local = {
          \ '<plug>(wiki-list-toggle)' : '<c-w>',
          \ 'i_<plug>(wiki-list-toggle)' : '<c-w>',
          \}
<
  Here `<c-w>` is mapped to |<plug>(wiki-list-toggle)| in normal mode and
  insert mode, respectively. The available `<plug>` mappings are listed in
  |wiki-mappings|.

  Default: Undefined

*g:wiki_month_names*
  A list of the names for each month. Used for interpolating month names in
  the month template, |g:wiki_template_title_month|.

  Default: `['January', 'February', ..., 'December']`

*g:wiki_list_todos*
  A list of TODO toggles that may be toggled with |<plug>(wiki-list-toggle)|,
  which is by default mapped to `<c-s>`.

  Default: `['TODO', 'DONE']`

*g:wiki_toc_title*
  The title of TOC listings.

  Default: `'Contents'`

*g:wiki_file_open*
  Name of a function or a |FuncRef| for a function that should be used to open
  a file url (see also |wiki-links-urls|). The function should give a non-zero
  return value if it opens the url. If not, the plugin falls back to opening
  the url with Vim. An example: >

    let g:wiki_file_open = 'WikiFileOpen'

    function! WikiFileOpen(...) abort dict
      if self.path =~# 'pdf$'
        silent execute '!zathura' fnameescape(self.path) '&'
        return 1
      endif

      return 0
    endfunction

*g:wiki_viewer*
  A dictionary that specifies which viewer to use for a given filetype. The
  entry `_` specifies the fallback or generic viewer. This option thus allows
  one to setup different viewers for different file types that are used by the
  generic link scheme opener (see |wiki-links-urls|) and by |WikiExport|.

  Default: >
    let g:wiki_viewer = {
        \ '_' : OS Dependent: 'xdg-open' (Linux) | 'open' (OSX),
        \}

*g:wiki_export*
  A dictionary that specifies the default configuration for |WikiExport|
  options. See the specifications for the options for more information.

  Default: >
    let g:wiki_export = {
        \ 'args' : '',
        \ 'from_format' : 'markdown',
        \ 'ext' : 'pdf',
        \ 'view' : v:false,
        }

*g:wiki_tags*
  A dictionary that specifies the default configuration for |WikiTagSearch|
  options. See the specifications for the options for more information.

  Default: >
    let g:wiki_tags = {
        \ 'output' : 'loclist',
        }

*g:wiki_template_title_month*
  A string that specifies the title of the month template. The following keys
  are interpolated:

    `%(month)`         Month number
    `%(month-name)`    Name of month (see |g:wiki_month_names|)
    `%(year)`          Year (4 digits)

  Default: `'# Summary, %(year) %(month-name)'`

*g:wiki_template_title_week*
  A string that specifies the title of the week template. The following keys
  are interpolated:

    `%(week)`    Week number
    `%(year)`    Year (4 digits)

  Default: `'# Summary, %(year) week %(week)'`

==============================================================================
COMMANDS                                                        *wiki-commands*

The following is a list of commands that are available in the wiki. Most of
the commands are also available as mappings of the form `<plug>(wiki-[name])`.

*WikiEnable*
Load |wiki.vim| for the current file. If the current file type is not in
|g:wiki_filetypes|, then it will be added, so that interwiki links will be
possible.

*<plug>(wiki-index)*
*WikiIndex*
  Go to wiki index. When not inside a wiki page, the index is specified by the
  option |g:wiki_root|.

*<plug>(wiki-open)*
*WikiOpen*
  Open (or create) a page. Asks for user input to specify the page name. When
  not already inside a wiki, the wiki root is given by |g:wiki_root|.

*<plug>(wiki-journal)*
*WikiJournal*
  Go to todays journal entry.

*<plug>(wiki-reload)*
*WikiReload*
  Reload the wiki plugin. Mostly useful for plugin development.

*<plug>(wiki-code-run)*
*WikiCodeRun*
  Run current code snippet (this does not currently work properly).

*<plug>(wiki-graph-find-backlinks)*
*WikiGraphFindBacklinks*
  Find backlinks to current page.

*<plug>(wiki-graph-in)*
*WikiGraphIn*
  Show link graph to current page.

*<plug>(wiki-graph-out)*
*WikiGraphOut*
  Show link graph from current page.

*<plug>(wiki-link-next)*
*WikiLinkNext*
  Go to next link.

*<plug>(wiki-link-prev)*
*WikiLinkPrev*
  Go to previous link.

*<plug>(wiki-link-open)*
*WikiLinkOpen*
  Open/follow link. Will create a new link if the text under the cursor is not
  already a link.
                                                         *#User#WikiLinkOpened*
  The user autocommand `WikiLinkOpened` is triggered after a wiki link has
  been triggered. This allows the user to add custom functionality after
  opening wiki links. The following example will center the cursor inside the
  window after following a link: >

    augroup MyWikiAutocmds
      autocmd!
      autocmd User WikiLinkOpened normal! zz
    augroup END

*<plug>(wiki-link-open-split)*
*WikiLinkOpenSplit*
  Similar to |WikiLinkOpen|, except wiki links are opened in a |vsplit|.

*<plug>(wiki-link-return)*
*WikiLinkReturn*
  Go back to previous page.

*<plug>(wiki-link-toggle)*
*<plug>(wiki-link-toggle-visual)*    |xmap|
*<plug>(wiki-link-toggle-operator)*  |map-operator|
*WikiLinkToggle*
  Toggle wiki link.

*<plug>(wiki-list-toggle)*
*WikiListToggle*
  Toggle a list item. Map works in both normal and insert mode.

*<plug>(wiki-list-uniq)*
*WikiListUniq*
  Parse the current list and remove repeated entries recursively.

*<plug>(wiki-list-uniq-local)*
*WikiListUniqLocal*
  Similar to |WikiListUniq|, but only within the current list depth.

*<plug>(wiki-page-delete)*
*WikiPageDelete*
  Delete wiki page.

*<plug>(wiki-page-rename)*
*WikiPageRename*
  Rename wiki page (will update all links to the page).

*<plug>(wiki-page-toc)*
*WikiPageToc*
  Create/Update table of contents.

*<plug>(wiki-page-toc-local)*
*WikiPageTocLocal*
  Create/Update table of contents (section local variant).

*<plug>(wiki-journal-index)*
*WikiJournalIndex*
  Insert a sorted list of links to all journal pages below the cursor using
  wiki style links

*<plug>(wiki-journal-index-md)*
*WikiJournalIndex!*
  Insert a sorted list of links to all journal pages below the cursor using
  markdown style links

*<plug>(wiki-journal-next)*
*WikiJournalNext*
  Go to next day/week/month.

*<plug>(wiki-journal-prev)*
*WikiJournalPrev*
  Go to previous day/week/month.

*<plug>(wiki-journal-copy-tonext)*
*WikiJournalCopyToNext*
  Copy current entry to next work day (unless the entry for next workday
  already exists).

*<plug>(wiki-journal-toweek)*
*WikiJournalToWeek*
  Go to week summary. If not existing, then parse the day entries to make
  a first draft. The title is given by |g:wiki_template_title_week|.

*<plug>(wiki-journal-tomonth)*
*WikiJournalToMonth*
  Go to month summary. If not existing, then parse the day entries and
  relevant week summaries to make a first draft. The title is given by
  |g:wiki_template_title_month|.

*<plug>(wiki-export)*
[range]*WikiExport*  [options] [fname]
  Export the current wiki file with `pandoc`. The main argument `fname`
  specifies the target filename and format (implied by the file extension),
  e.g. `test.pdf` or `test.html`. If the argument is not specified, then
  a temporary filename is generated. In this case, the `-view` option is
  activated regardless of the basic configuration.

  Available options are (use |g:wiki_export| to set default values):

  -args~
    Specify extra arguments for `pandoc`.

  -from-format FRMT | -f FRMT~
    Specify format of the wiki page.

  -ext EXT~
    Specify extension to use if `fname` is not provided.

  -view~
    Set to true to open documents with specified `viewer` by default.

  -viewer PATH~
    Specify viewer to use to open the exported file. This implies `-view` and
    overrides the |g:wiki_viewer| option.

  Note: This feature requires `pandoc` (https://pandoc.org/) to build the `pdf`
        files.

*<plug>(wiki-tag-list)*
*WikiTagList*
  Show list of detected tags.

*<plug>(wiki-tag-reload)*
*WikiTagReload*
  Source wiki files and reload tags.

*<plug>(wiki-tag-search)*
*WikiTagSearch*  [options] [tag]
  List wiki pages that contain the desired `tag`. If the argument `tag` is not
  supplied, the command asks for input. See also |wiki-tags| for more
  information of the tags feature and |WikiFzfTags| for an alternative search
  mechanism.

  Available options are (use |g:wiki_tags| to set default values):

  -output TRG~
    Where to put the search result. `TRG` may be one of:

      * `loclist`   Use |location-list|
      * `echo`      Display results on screen
      * `scratch`   Add results to a scratch buffer
      * `cursor`    Insert result below cursor

*CtrlPWiki*
  Open |CtrlP| in find file mode for wiki files in current wiki or in the main
  wiki defined by |g:wiki_root|.

*<plug>(wiki-fzf-pages)*
*WikiFzfPages*
  Open |fzf| in find file mode for wiki files in current wiki or in the main
  wiki defined by |g:wiki_root|.

*<plug>(wiki-fzf-tags)*
*WikiFzfTags*
  Open |fzf| and search for tags.

*<plug>(wiki-fzf-toc)*
*WikiFzfToc*
  Open |fzf| and list table of contents entries for the current wiki page.

==============================================================================
MAPPINGS                                                        *wiki-mappings*

Here we describe the mappings provided by the wiki plugin, as well as the
default maps. Note that most of the mappings are also available as commands.
These mappings are described in |wiki-commands|.

------------------------------------------------------------------------------
TEXT OBJECTS                                           *wiki-mappings-text-obj*

The following mappings are available as visual mode and operator mode
mappings, i.e. |xmap| and |omap|.

*<plug>(wiki-au)*
*<plug>(wiki-iu)*
  Text object for link urls.

*<plug>(wiki-at)*
*<plug>(wiki-it)*
  Text object for link texts.

*<plug>(wiki-al)*
*<plug>(wiki-il)*
  Text object for list items. The inner object is the current list item
  including children, the outer object is the parent list item including all
  its children.

------------------------------------------------------------------------------
DEFAULT MAPPINGS                                        *wiki-mappings-default*

This is a list of default mappings. For a more detailed description of each
mapping, read the documentation of the `<plug>(wiki-[name])` form of the
mapping. The mode specifier is a single letter which indicates which mode the
mapping is valid in. See e.g. |nmap|, |imap|, |omap| or |xmap| for more
information about the different modes.

  ---------------------------------------------------------------------~
   MODE  LHS                 RHS~
  ---------------------------------------------------------------------~
   `n`     <leader>ww          |<plug>(wiki-index)|               [GLOBAL]
   `n`     <leader>wn          |<plug>(wiki-open)|                [GLOBAL]
   `n`     <leader>w<leader>w  |<plug>(wiki-journal)|             [GLOBAL]
   `n`     <leader>wx          |<plug>(wiki-reload)|              [GLOBAL]
   `n`     <leader>wc          |<plug>(wiki-code-run)|
   `n`     <leader>wb          |<plug>(wiki-graph-find-backlinks)|
   `n`     <leader>wg          |<plug>(wiki-graph-in)|
   `n`     <leader>wG          |<plug>(wiki-graph-out)|
   `n`     <leader>wf          |<plug>(wiki-link-toggle)|
   `n`     <leader>wd          |<plug>(wiki-page-delete)|
   `n`     <leader>wr          |<plug>(wiki-page-rename)|
   `n`     <leader>wt          |<plug>(wiki-page-toc)|
   `n`     <leader>wT          |<plug>(wiki-page-toc-local)|
   `n`     <leader>wp          |<plug>(wiki-export)|
   `x`     <leader>wp          |<plug>(wiki-export)|
   `n`     <leader>wlu         |<plug>(wiki-list-uniq)|
   `n`     <leader>wlU         |<plug>(wiki-list-uniq-local)|
   `n`     <leader>wsl         |<plug>(wiki-tag-list)|
   `n`     <leader>wsr         |<plug>(wiki-tag-reload)|
   `n`     <leader>wss         |<plug>(wiki-tag-search)|
   `n`     <tab>               |<plug>(wiki-link-next)|
   `n`     <cr>                |<plug>(wiki-link-open)|
   `n`     <c-cr>              |<plug>(wiki-link-open-split)|
   `n`     <s-tab>             |<plug>(wiki-link-prev)|
   `n`     <bs>                |<plug>(wiki-link-return)|
   `n`     gl                  |<plug>(wiki-link-toggle-operator)|
   `ni`    <c-s>               |<plug>(wiki-list-toggle)|
   `x`     <cr>                |<plug>(wiki-link-toggle-visual)|
   `ox`    au                  |<plug>(wiki-au)|
   `ox`    iu                  |<plug>(wiki-iu)|
   `ox`    at                  |<plug>(wiki-at)|
   `ox`    it                  |<plug>(wiki-it)|
   `ox`    al                  |<plug>(wiki-al)|
   `ox`    il                  |<plug>(wiki-il)|
  ---------------------------------------------------------------------~

==============================================================================
LINKS                                                              *wiki-links*

Links are one of the most essential features of a wiki, and as such, requires
particular attention.  A link is a structure that consists of an URL (see
|wiki-links-urls|) and a possibly empty description.  Any link may be
activated with the mapping `<cr>` or `<c-cr>`, where the latter will open the
link in a split (if it is an internal link).  One may use `<bs>` to navigate
back after following a link.

These are the link formats that are currently supported:

- Link URLs                          |wiki-links-urls|
    `http://www.example.com`
    `wiki:index`
    `journal:2013-04-05`
    `doi:10.1002%2Fandp.19053220607`
- Markdown links                     |wiki-links-markdown|
    `[Description](Link)`
- Wiki links                         |wiki-links-wiki|
    `[[Link]]`
    `[[Link|Description]]`
- Reference links                    |wiki-links-reference|
    `[Target]`
    `[Description][Target]`

------------------------------------------------------------------------------
LINK URLS                                                     *wiki-links-urls*

An URL, which is short for Uniform Resource Locator, has the general format

  `[scheme:]address`

The `scheme` specifies which kind of link it is.  If no handle is specified,
it is assumed that the address is an internal wiki link, i.e. the `wiki` scheme
is assumed.

The following schemes are supported:

  wiki~
  journal~
    Links to an internal wiki page.  The address can be both relative and
    absolute.  Absolute addresses are relative to the wiki root.  Further, the
    addresses may include anchors to specific sections of the wiki entry.
    Some examples might be enlightening: >

      wiki:index

      If the address has whitespace, we need to use a full link style, for
      instance:

      [[wiki:index#section 1]]

      Also, to link to a journal entry, one may use:
      journal:2014-03-02

      For convenience, an ISO date will also work as a journal link.
<
  file~
    Links to a file on the system and opens it.  This can be customized with
    |g:wiki_file_open|, but falls back to opening the file with Vim.

  doi~
    Will use the `generic` scheme handler on an expanded URL of the form
    `http://dx.doi.org/<address>`, where `<address>` is the link address.

  generic~
    If the scheme is not recognized, the link is opened with the system
    handler, which is defined by |g:wiki_pdf_viewer| on Linux.  Currently,
    only Linux is supported here.  This will work quite well on standard Linux
    distributions, e.g. for opening `http` and `https` URLs.

Schemes are defined in `autoload/wiki/url/{scheme}.vim`, which means it is
relatively easy to define new custom schemes. See the generic scheme for
a simple example of how this is implemented.

------------------------------------------------------------------------------
MARKDOWN LINKS                                            *wiki-links-markdown*

Markdown links are one of the standard type of links, and the look like this: >

  [Description](url)

One may toggle between markdown style links and wiki style links with the
`<leader>wf` mapping.

------------------------------------------------------------------------------
WIKI LINKS                                                    *wiki-links-wiki*

Wiki links are similar in style to the standard Mediawiki links.  This is the
main syntax for creating internal wiki links.  The description part is
optional.  Examples: >

    [[Link]]
    [[Link|Description]]

Any non-link words may be turned into a wiki link with the `<cr>` mapping.
One may also use visual mode to turn a selection into a wiki link, or one may
use the `gl` operator.

The `<leader>wf` mapping can be used to add a description to a wiki link or to
toggle it to a markdown style link.

------------------------------------------------------------------------------
REFERENCE LINKS                                          *wiki-links-reference*

Reference style links are slightly different.  They consist of up to three
parts: An optional `description`, a `target` and a `link.`  The syntax is best
explained through an example: >

  The most simple form, and perhaps the most useful one, is to add a simple
  reference like this [1].

  One may also add a [description][target].

  The target may consist of both words and numbers, e.g. [like this][Ref 3].
  [Description][Target]

  [1]: Link 1
  [Target]: Link 2
  [Ref 3]: Link 3

Reference style links may be opened with `<cr>` both on the reference location
and on the link line.

==============================================================================
LISTS                                                              *wiki-lists*

It is common to write lists inside wikis, and so there is some support for
working with lists:

- Use `<c-s>` in both insert and normal mode to toggle a TODO at the beginning
  of the list item, or to toggle the checkbox if it is present.

==============================================================================
COMPLETION                                                    *wiki-completion*

This plugin provides an |omni-complete| function that completes internal link
targets, including anchors.  This should work both for markdown and wiki
style links (see |wiki-links|).

==============================================================================
TAGS                                                                *wiki-tags*

Wiki pages may be tagged with the syntax `:tag-name:` for a single tag or
`:tag-one:tag-two:` for multiple tags. The tag name must consist of purely
non-space characters. All tags added in the top 15 lines of a file will be
recognized.

Related commands:
- |WikiTagList|
- |WikiTagReload|
- |WikiTagSearch|
- |WikiFzfTags|

Related settings:
- |g:wiki_tags|

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
